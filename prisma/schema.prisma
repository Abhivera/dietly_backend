generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  email       String          @unique
  password    String
  createdAt   DateTime        @default(now())
  tokens      RefreshToken[]  @relation("UserTokens")
  userProfile UserProfile?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  age            Int
  weight         Float
  height         Float
  gender         String
  goal           String
  activityLevel  String
  preferences    UserPreferences?
  mealLogs       MealLog[]
  exerciseLogs   ExerciseLog[]
  progressLogs   ProgressLog[]
}

model UserPreferences {
  id                 Int    @id @default(autoincrement())
  dietaryRestrictions String?
  dailyCalorieGoal    Float
  waterIntakeGoal     Float
  userId              Int    @unique
  userProfile         UserProfile @relation(fields: [userId], references: [id])
}

model FoodItem {
  id          Int     @id @default(autoincrement())
  name        String
  category    String
  calories    Float
  carbs       Float
  protein     Float
  fat         Float
  servingSize String

  MealLog MealLog[]
}

model MealLog {
  id             Int    @id @default(autoincrement())
  userId         Int
  date           DateTime
  mealType       String
  foodId         Int
  quantity       Float
  totalCalories  Float
  userProfile    UserProfile @relation(fields: [userId], references: [id])
  food           FoodItem    @relation(fields: [foodId], references: [id])
}

model Exercise {
  id                  Int    @id @default(autoincrement())
  name                String
  caloriesBurnedPerMinute Float

  ExerciseLog ExerciseLog[]
}

model ExerciseLog {
  id             Int    @id @default(autoincrement())
  userId         Int
  exerciseId     Int
  date           DateTime
  duration       Float
  caloriesBurned Float
  userProfile    UserProfile @relation(fields: [userId], references: [id])
  exercise       Exercise    @relation(fields: [exerciseId], references: [id])
}

model ProgressLog {
  id                Int    @id @default(autoincrement())
  userId            Int
  date              DateTime
  weight            Float
  caloriesBurned    Float
  caloriesConsumed  Float
  userProfile       UserProfile @relation(fields: [userId], references: [id])
}
